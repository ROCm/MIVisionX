/*
MIT License

Copyright (c) 2018 Advanced Micro Devices, Inc. All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

/* This file is generated by nnir2openvx.py on 2019-06-03T16:54:57.775154-07:00 */

#include "annmodule.h"
#include <VX/vx_khr_nn.h>
#include <vx_amd_nn.h>
#include <vx_ext_amd.h>
#include <stdio.h>

#define ERROR_CHECK_OBJECT(obj) { vx_status status = vxGetStatus((vx_reference)(obj)); if(status != VX_SUCCESS) { vxAddLogEntry((vx_reference)context, status     , "ERROR: failed with status = (%d) at " __FILE__ "#%d\n", status, __LINE__); return status; } }
#define ERROR_CHECK_STATUS(call) { vx_status status = (call); if(status != VX_SUCCESS) { vxAddLogEntry((vx_reference)context, status, "ERROR: failed with status = (%d) at " __FILE__ "#%d\n", status, __LINE__); return status; } }

static vx_status initializeTensor(vx_context context, vx_tensor tensor, FILE * fp, const char * binaryFilename)
{
    vx_enum data_type = VX_TYPE_FLOAT32;
    vx_size num_of_dims = 4, dims[4] = { 1, 1, 1, 1 }, stride[4];
    ERROR_CHECK_STATUS(vxQueryTensor(tensor, VX_TENSOR_DATA_TYPE, &data_type, sizeof(vx_enum)));
    ERROR_CHECK_STATUS(vxQueryTensor(tensor, VX_TENSOR_NUMBER_OF_DIMS, &num_of_dims, sizeof(vx_size)));
    ERROR_CHECK_STATUS(vxQueryTensor(tensor, VX_TENSOR_DIMS, &dims, num_of_dims * sizeof(vx_size)));
    vx_size itemsize = sizeof(float);
    if(data_type == VX_TYPE_UINT8 || data_type == VX_TYPE_INT8) {
        itemsize = sizeof(vx_uint8);
    }
    else if(data_type == VX_TYPE_UINT16 || data_type == VX_TYPE_INT16 || data_type == VX_TYPE_FLOAT16) {
        itemsize = sizeof(vx_uint16);
    }
    else if(data_type == VX_TYPE_INT64) {
        itemsize = sizeof(vx_int64);
    }
    vx_size count = dims[0] * dims[1] * dims[2] * dims[3];

    vx_uint32 h[2] = { 0 };
    fread(h, 1, sizeof(h), fp);
    if(h[0] != 0xf00dd1e1 || (vx_size)h[1] != (count*itemsize)) {
      vxAddLogEntry((vx_reference)tensor, VX_FAILURE, "ERROR: invalid data (magic,size)=(0x%x,%d) in %s at byte position %d -- expected size is %ld\n", h[0], h[1], binaryFilename, ftell(fp)-sizeof(h), count*itemsize);
      return VX_FAILURE;
    }

    vx_map_id map_id;
    void * ptr;
    ERROR_CHECK_STATUS(vxMapTensorPatch(tensor, num_of_dims, nullptr, nullptr, &map_id, stride, (void **)&ptr, VX_WRITE_ONLY, VX_MEMORY_TYPE_HOST, 0));
    vx_size n = fread(ptr, itemsize, count, fp);
    if(n != count) {
        vxAddLogEntry((vx_reference)tensor, VX_FAILURE, "ERROR: expected char[%ld], but got char[%ld] in %s\n", count*itemsize, n*itemsize, binaryFilename);
        return VX_FAILURE;
    }
    ERROR_CHECK_STATUS(vxUnmapTensorPatch(tensor, map_id));

    return VX_SUCCESS;
}

VX_API_ENTRY vx_status VX_API_CALL annAddToGraph(vx_graph graph, vx_tensor data, vx_tensor detection_out, const char * binaryFilename)
{
    vx_context context = vxGetContext((vx_reference)graph);
    ERROR_CHECK_OBJECT(context);
    ERROR_CHECK_STATUS(vxLoadKernels(context, "vx_nn"));

    // create variables
    vx_size dims_conv0_w[4] = { 3, 3, 3, 32 };
    vx_tensor conv0_w = vxCreateTensor(context, 4, dims_conv0_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv0_w);
    vx_size dims_conv0_b[2] = { 32, 1 };
    vx_tensor conv0_b = vxCreateTensor(context, 2, dims_conv0_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv0_b);
    vx_size dims_conv1_dw_w[4] = { 3, 3, 32, 32 };
    vx_tensor conv1_dw_w = vxCreateTensor(context, 4, dims_conv1_dw_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv1_dw_w);
    vx_size dims_conv1_dw_b[2] = { 32, 1 };
    vx_tensor conv1_dw_b = vxCreateTensor(context, 2, dims_conv1_dw_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv1_dw_b);
    vx_size dims_conv1_w[4] = { 1, 1, 32, 64 };
    vx_tensor conv1_w = vxCreateTensor(context, 4, dims_conv1_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv1_w);
    vx_size dims_conv1_b[2] = { 64, 1 };
    vx_tensor conv1_b = vxCreateTensor(context, 2, dims_conv1_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv1_b);
    vx_size dims_conv2_dw_w[4] = { 3, 3, 64, 64 };
    vx_tensor conv2_dw_w = vxCreateTensor(context, 4, dims_conv2_dw_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv2_dw_w);
    vx_size dims_conv2_dw_b[2] = { 64, 1 };
    vx_tensor conv2_dw_b = vxCreateTensor(context, 2, dims_conv2_dw_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv2_dw_b);
    vx_size dims_conv2_w[4] = { 1, 1, 64, 128 };
    vx_tensor conv2_w = vxCreateTensor(context, 4, dims_conv2_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv2_w);
    vx_size dims_conv2_b[2] = { 128, 1 };
    vx_tensor conv2_b = vxCreateTensor(context, 2, dims_conv2_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv2_b);
    vx_size dims_conv3_dw_w[4] = { 3, 3, 128, 128 };
    vx_tensor conv3_dw_w = vxCreateTensor(context, 4, dims_conv3_dw_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv3_dw_w);
    vx_size dims_conv3_dw_b[2] = { 128, 1 };
    vx_tensor conv3_dw_b = vxCreateTensor(context, 2, dims_conv3_dw_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv3_dw_b);
    vx_size dims_conv3_w[4] = { 1, 1, 128, 128 };
    vx_tensor conv3_w = vxCreateTensor(context, 4, dims_conv3_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv3_w);
    vx_size dims_conv3_b[2] = { 128, 1 };
    vx_tensor conv3_b = vxCreateTensor(context, 2, dims_conv3_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv3_b);
    vx_size dims_conv4_dw_w[4] = { 3, 3, 128, 128 };
    vx_tensor conv4_dw_w = vxCreateTensor(context, 4, dims_conv4_dw_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv4_dw_w);
    vx_size dims_conv4_dw_b[2] = { 128, 1 };
    vx_tensor conv4_dw_b = vxCreateTensor(context, 2, dims_conv4_dw_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv4_dw_b);
    vx_size dims_conv4_w[4] = { 1, 1, 128, 256 };
    vx_tensor conv4_w = vxCreateTensor(context, 4, dims_conv4_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv4_w);
    vx_size dims_conv4_b[2] = { 256, 1 };
    vx_tensor conv4_b = vxCreateTensor(context, 2, dims_conv4_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv4_b);
    vx_size dims_conv5_dw_w[4] = { 3, 3, 256, 256 };
    vx_tensor conv5_dw_w = vxCreateTensor(context, 4, dims_conv5_dw_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv5_dw_w);
    vx_size dims_conv5_dw_b[2] = { 256, 1 };
    vx_tensor conv5_dw_b = vxCreateTensor(context, 2, dims_conv5_dw_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv5_dw_b);
    vx_size dims_conv5_w[4] = { 1, 1, 256, 256 };
    vx_tensor conv5_w = vxCreateTensor(context, 4, dims_conv5_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv5_w);
    vx_size dims_conv5_b[2] = { 256, 1 };
    vx_tensor conv5_b = vxCreateTensor(context, 2, dims_conv5_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv5_b);
    vx_size dims_conv6_dw_w[4] = { 3, 3, 256, 256 };
    vx_tensor conv6_dw_w = vxCreateTensor(context, 4, dims_conv6_dw_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv6_dw_w);
    vx_size dims_conv6_dw_b[2] = { 256, 1 };
    vx_tensor conv6_dw_b = vxCreateTensor(context, 2, dims_conv6_dw_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv6_dw_b);
    vx_size dims_conv6_w[4] = { 1, 1, 256, 512 };
    vx_tensor conv6_w = vxCreateTensor(context, 4, dims_conv6_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv6_w);
    vx_size dims_conv6_b[2] = { 512, 1 };
    vx_tensor conv6_b = vxCreateTensor(context, 2, dims_conv6_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv6_b);
    vx_size dims_conv7_dw_w[4] = { 3, 3, 512, 512 };
    vx_tensor conv7_dw_w = vxCreateTensor(context, 4, dims_conv7_dw_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv7_dw_w);
    vx_size dims_conv7_dw_b[2] = { 512, 1 };
    vx_tensor conv7_dw_b = vxCreateTensor(context, 2, dims_conv7_dw_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv7_dw_b);
    vx_size dims_conv7_w[4] = { 1, 1, 512, 512 };
    vx_tensor conv7_w = vxCreateTensor(context, 4, dims_conv7_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv7_w);
    vx_size dims_conv7_b[2] = { 512, 1 };
    vx_tensor conv7_b = vxCreateTensor(context, 2, dims_conv7_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv7_b);
    vx_size dims_conv8_dw_w[4] = { 3, 3, 512, 512 };
    vx_tensor conv8_dw_w = vxCreateTensor(context, 4, dims_conv8_dw_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv8_dw_w);
    vx_size dims_conv8_dw_b[2] = { 512, 1 };
    vx_tensor conv8_dw_b = vxCreateTensor(context, 2, dims_conv8_dw_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv8_dw_b);
    vx_size dims_conv8_w[4] = { 1, 1, 512, 512 };
    vx_tensor conv8_w = vxCreateTensor(context, 4, dims_conv8_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv8_w);
    vx_size dims_conv8_b[2] = { 512, 1 };
    vx_tensor conv8_b = vxCreateTensor(context, 2, dims_conv8_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv8_b);
    vx_size dims_conv9_dw_w[4] = { 3, 3, 512, 512 };
    vx_tensor conv9_dw_w = vxCreateTensor(context, 4, dims_conv9_dw_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv9_dw_w);
    vx_size dims_conv9_dw_b[2] = { 512, 1 };
    vx_tensor conv9_dw_b = vxCreateTensor(context, 2, dims_conv9_dw_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv9_dw_b);
    vx_size dims_conv9_w[4] = { 1, 1, 512, 512 };
    vx_tensor conv9_w = vxCreateTensor(context, 4, dims_conv9_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv9_w);
    vx_size dims_conv9_b[2] = { 512, 1 };
    vx_tensor conv9_b = vxCreateTensor(context, 2, dims_conv9_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv9_b);
    vx_size dims_conv10_dw_w[4] = { 3, 3, 512, 512 };
    vx_tensor conv10_dw_w = vxCreateTensor(context, 4, dims_conv10_dw_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv10_dw_w);
    vx_size dims_conv10_dw_b[2] = { 512, 1 };
    vx_tensor conv10_dw_b = vxCreateTensor(context, 2, dims_conv10_dw_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv10_dw_b);
    vx_size dims_conv10_w[4] = { 1, 1, 512, 512 };
    vx_tensor conv10_w = vxCreateTensor(context, 4, dims_conv10_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv10_w);
    vx_size dims_conv10_b[2] = { 512, 1 };
    vx_tensor conv10_b = vxCreateTensor(context, 2, dims_conv10_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv10_b);
    vx_size dims_conv11_dw_w[4] = { 3, 3, 512, 512 };
    vx_tensor conv11_dw_w = vxCreateTensor(context, 4, dims_conv11_dw_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv11_dw_w);
    vx_size dims_conv11_dw_b[2] = { 512, 1 };
    vx_tensor conv11_dw_b = vxCreateTensor(context, 2, dims_conv11_dw_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv11_dw_b);
    vx_size dims_conv11_w[4] = { 1, 1, 512, 512 };
    vx_tensor conv11_w = vxCreateTensor(context, 4, dims_conv11_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv11_w);
    vx_size dims_conv11_b[2] = { 512, 1 };
    vx_tensor conv11_b = vxCreateTensor(context, 2, dims_conv11_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv11_b);
    vx_size dims_conv12_dw_w[4] = { 3, 3, 512, 512 };
    vx_tensor conv12_dw_w = vxCreateTensor(context, 4, dims_conv12_dw_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv12_dw_w);
    vx_size dims_conv12_dw_b[2] = { 512, 1 };
    vx_tensor conv12_dw_b = vxCreateTensor(context, 2, dims_conv12_dw_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv12_dw_b);
    vx_size dims_conv12_w[4] = { 1, 1, 512, 1024 };
    vx_tensor conv12_w = vxCreateTensor(context, 4, dims_conv12_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv12_w);
    vx_size dims_conv12_b[2] = { 1024, 1 };
    vx_tensor conv12_b = vxCreateTensor(context, 2, dims_conv12_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv12_b);
    vx_size dims_conv13_dw_w[4] = { 3, 3, 1024, 1024 };
    vx_tensor conv13_dw_w = vxCreateTensor(context, 4, dims_conv13_dw_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv13_dw_w);
    vx_size dims_conv13_dw_b[2] = { 1024, 1 };
    vx_tensor conv13_dw_b = vxCreateTensor(context, 2, dims_conv13_dw_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv13_dw_b);
    vx_size dims_conv13_w[4] = { 1, 1, 1024, 1024 };
    vx_tensor conv13_w = vxCreateTensor(context, 4, dims_conv13_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv13_w);
    vx_size dims_conv13_b[2] = { 1024, 1 };
    vx_tensor conv13_b = vxCreateTensor(context, 2, dims_conv13_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv13_b);
    vx_size dims_conv14_1_w[4] = { 1, 1, 1024, 256 };
    vx_tensor conv14_1_w = vxCreateTensor(context, 4, dims_conv14_1_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv14_1_w);
    vx_size dims_conv14_1_b[2] = { 256, 1 };
    vx_tensor conv14_1_b = vxCreateTensor(context, 2, dims_conv14_1_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv14_1_b);
    vx_size dims_conv14_2_w[4] = { 3, 3, 256, 512 };
    vx_tensor conv14_2_w = vxCreateTensor(context, 4, dims_conv14_2_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv14_2_w);
    vx_size dims_conv14_2_b[2] = { 512, 1 };
    vx_tensor conv14_2_b = vxCreateTensor(context, 2, dims_conv14_2_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv14_2_b);
    vx_size dims_conv15_1_w[4] = { 1, 1, 512, 128 };
    vx_tensor conv15_1_w = vxCreateTensor(context, 4, dims_conv15_1_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv15_1_w);
    vx_size dims_conv15_1_b[2] = { 128, 1 };
    vx_tensor conv15_1_b = vxCreateTensor(context, 2, dims_conv15_1_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv15_1_b);
    vx_size dims_conv15_2_w[4] = { 3, 3, 128, 256 };
    vx_tensor conv15_2_w = vxCreateTensor(context, 4, dims_conv15_2_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv15_2_w);
    vx_size dims_conv15_2_b[2] = { 256, 1 };
    vx_tensor conv15_2_b = vxCreateTensor(context, 2, dims_conv15_2_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv15_2_b);
    vx_size dims_conv16_1_w[4] = { 1, 1, 256, 128 };
    vx_tensor conv16_1_w = vxCreateTensor(context, 4, dims_conv16_1_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv16_1_w);
    vx_size dims_conv16_1_b[2] = { 128, 1 };
    vx_tensor conv16_1_b = vxCreateTensor(context, 2, dims_conv16_1_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv16_1_b);
    vx_size dims_conv16_2_w[4] = { 3, 3, 128, 256 };
    vx_tensor conv16_2_w = vxCreateTensor(context, 4, dims_conv16_2_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv16_2_w);
    vx_size dims_conv16_2_b[2] = { 256, 1 };
    vx_tensor conv16_2_b = vxCreateTensor(context, 2, dims_conv16_2_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv16_2_b);
    vx_size dims_conv17_1_w[4] = { 1, 1, 256, 64 };
    vx_tensor conv17_1_w = vxCreateTensor(context, 4, dims_conv17_1_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv17_1_w);
    vx_size dims_conv17_1_b[2] = { 64, 1 };
    vx_tensor conv17_1_b = vxCreateTensor(context, 2, dims_conv17_1_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv17_1_b);
    vx_size dims_conv17_2_w[4] = { 3, 3, 64, 128 };
    vx_tensor conv17_2_w = vxCreateTensor(context, 4, dims_conv17_2_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv17_2_w);
    vx_size dims_conv17_2_b[2] = { 128, 1 };
    vx_tensor conv17_2_b = vxCreateTensor(context, 2, dims_conv17_2_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv17_2_b);
    vx_size dims_conv11_mbox_loc_w[4] = { 1, 1, 512, 12 };
    vx_tensor conv11_mbox_loc_w = vxCreateTensor(context, 4, dims_conv11_mbox_loc_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv11_mbox_loc_w);
    vx_size dims_conv11_mbox_loc_b[2] = { 12, 1 };
    vx_tensor conv11_mbox_loc_b = vxCreateTensor(context, 2, dims_conv11_mbox_loc_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv11_mbox_loc_b);
    vx_size dims_conv11_mbox_conf_w[4] = { 1, 1, 512, 63 };
    vx_tensor conv11_mbox_conf_w = vxCreateTensor(context, 4, dims_conv11_mbox_conf_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv11_mbox_conf_w);
    vx_size dims_conv11_mbox_conf_b[2] = { 63, 1 };
    vx_tensor conv11_mbox_conf_b = vxCreateTensor(context, 2, dims_conv11_mbox_conf_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv11_mbox_conf_b);
    vx_size dims_conv13_mbox_loc_w[4] = { 1, 1, 1024, 24 };
    vx_tensor conv13_mbox_loc_w = vxCreateTensor(context, 4, dims_conv13_mbox_loc_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv13_mbox_loc_w);
    vx_size dims_conv13_mbox_loc_b[2] = { 24, 1 };
    vx_tensor conv13_mbox_loc_b = vxCreateTensor(context, 2, dims_conv13_mbox_loc_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv13_mbox_loc_b);
    vx_size dims_conv13_mbox_conf_w[4] = { 1, 1, 1024, 126 };
    vx_tensor conv13_mbox_conf_w = vxCreateTensor(context, 4, dims_conv13_mbox_conf_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv13_mbox_conf_w);
    vx_size dims_conv13_mbox_conf_b[2] = { 126, 1 };
    vx_tensor conv13_mbox_conf_b = vxCreateTensor(context, 2, dims_conv13_mbox_conf_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv13_mbox_conf_b);
    vx_size dims_conv14_2_mbox_loc_w[4] = { 1, 1, 512, 24 };
    vx_tensor conv14_2_mbox_loc_w = vxCreateTensor(context, 4, dims_conv14_2_mbox_loc_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv14_2_mbox_loc_w);
    vx_size dims_conv14_2_mbox_loc_b[2] = { 24, 1 };
    vx_tensor conv14_2_mbox_loc_b = vxCreateTensor(context, 2, dims_conv14_2_mbox_loc_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv14_2_mbox_loc_b);
    vx_size dims_conv14_2_mbox_conf_w[4] = { 1, 1, 512, 126 };
    vx_tensor conv14_2_mbox_conf_w = vxCreateTensor(context, 4, dims_conv14_2_mbox_conf_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv14_2_mbox_conf_w);
    vx_size dims_conv14_2_mbox_conf_b[2] = { 126, 1 };
    vx_tensor conv14_2_mbox_conf_b = vxCreateTensor(context, 2, dims_conv14_2_mbox_conf_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv14_2_mbox_conf_b);
    vx_size dims_conv15_2_mbox_loc_w[4] = { 1, 1, 256, 24 };
    vx_tensor conv15_2_mbox_loc_w = vxCreateTensor(context, 4, dims_conv15_2_mbox_loc_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv15_2_mbox_loc_w);
    vx_size dims_conv15_2_mbox_loc_b[2] = { 24, 1 };
    vx_tensor conv15_2_mbox_loc_b = vxCreateTensor(context, 2, dims_conv15_2_mbox_loc_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv15_2_mbox_loc_b);
    vx_size dims_conv15_2_mbox_conf_w[4] = { 1, 1, 256, 126 };
    vx_tensor conv15_2_mbox_conf_w = vxCreateTensor(context, 4, dims_conv15_2_mbox_conf_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv15_2_mbox_conf_w);
    vx_size dims_conv15_2_mbox_conf_b[2] = { 126, 1 };
    vx_tensor conv15_2_mbox_conf_b = vxCreateTensor(context, 2, dims_conv15_2_mbox_conf_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv15_2_mbox_conf_b);
    vx_size dims_conv16_2_mbox_loc_w[4] = { 1, 1, 256, 24 };
    vx_tensor conv16_2_mbox_loc_w = vxCreateTensor(context, 4, dims_conv16_2_mbox_loc_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv16_2_mbox_loc_w);
    vx_size dims_conv16_2_mbox_loc_b[2] = { 24, 1 };
    vx_tensor conv16_2_mbox_loc_b = vxCreateTensor(context, 2, dims_conv16_2_mbox_loc_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv16_2_mbox_loc_b);
    vx_size dims_conv16_2_mbox_conf_w[4] = { 1, 1, 256, 126 };
    vx_tensor conv16_2_mbox_conf_w = vxCreateTensor(context, 4, dims_conv16_2_mbox_conf_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv16_2_mbox_conf_w);
    vx_size dims_conv16_2_mbox_conf_b[2] = { 126, 1 };
    vx_tensor conv16_2_mbox_conf_b = vxCreateTensor(context, 2, dims_conv16_2_mbox_conf_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv16_2_mbox_conf_b);
    vx_size dims_conv17_2_mbox_loc_w[4] = { 1, 1, 128, 24 };
    vx_tensor conv17_2_mbox_loc_w = vxCreateTensor(context, 4, dims_conv17_2_mbox_loc_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv17_2_mbox_loc_w);
    vx_size dims_conv17_2_mbox_loc_b[2] = { 24, 1 };
    vx_tensor conv17_2_mbox_loc_b = vxCreateTensor(context, 2, dims_conv17_2_mbox_loc_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv17_2_mbox_loc_b);
    vx_size dims_conv17_2_mbox_conf_w[4] = { 1, 1, 128, 126 };
    vx_tensor conv17_2_mbox_conf_w = vxCreateTensor(context, 4, dims_conv17_2_mbox_conf_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv17_2_mbox_conf_w);
    vx_size dims_conv17_2_mbox_conf_b[2] = { 126, 1 };
    vx_tensor conv17_2_mbox_conf_b = vxCreateTensor(context, 2, dims_conv17_2_mbox_conf_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv17_2_mbox_conf_b);

    // initialize variables
    FILE * fp__variables = fopen(binaryFilename, "rb");
    if(!fp__variables) {
        vxAddLogEntry((vx_reference)context, VX_FAILURE, "ERROR: unable to open: %s\n", binaryFilename);
        return VX_FAILURE;
    }
    { vx_uint32 magic = 0;
      fread(&magic, 1, sizeof(magic), fp__variables);
      if(magic != 0xf00dd1e0) {
        vxAddLogEntry((vx_reference)context, VX_FAILURE, "ERROR: invalid file magic in %s\n", binaryFilename);
        return VX_FAILURE;
      }
    }
    ERROR_CHECK_STATUS(initializeTensor(context, conv0_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv0_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv1_dw_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv1_dw_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv1_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv1_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv2_dw_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv2_dw_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv2_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv2_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv3_dw_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv3_dw_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv3_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv3_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv4_dw_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv4_dw_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv4_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv4_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv5_dw_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv5_dw_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv5_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv5_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv6_dw_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv6_dw_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv6_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv6_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv7_dw_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv7_dw_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv7_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv7_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv8_dw_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv8_dw_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv8_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv8_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv9_dw_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv9_dw_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv9_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv9_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv10_dw_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv10_dw_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv10_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv10_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv11_dw_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv11_dw_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv11_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv11_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv12_dw_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv12_dw_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv12_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv12_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv13_dw_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv13_dw_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv13_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv13_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv14_1_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv14_1_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv14_2_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv14_2_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv15_1_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv15_1_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv15_2_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv15_2_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv16_1_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv16_1_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv16_2_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv16_2_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv17_1_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv17_1_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv17_2_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv17_2_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv11_mbox_loc_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv11_mbox_loc_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv11_mbox_conf_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv11_mbox_conf_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv13_mbox_loc_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv13_mbox_loc_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv13_mbox_conf_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv13_mbox_conf_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv14_2_mbox_loc_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv14_2_mbox_loc_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv14_2_mbox_conf_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv14_2_mbox_conf_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv15_2_mbox_loc_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv15_2_mbox_loc_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv15_2_mbox_conf_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv15_2_mbox_conf_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv16_2_mbox_loc_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv16_2_mbox_loc_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv16_2_mbox_conf_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv16_2_mbox_conf_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv17_2_mbox_loc_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv17_2_mbox_loc_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv17_2_mbox_conf_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv17_2_mbox_conf_b, fp__variables, binaryFilename));
    { vx_uint32 magic = 0;
      fread(&magic, 1, sizeof(magic), fp__variables);
      if(magic != 0xf00dd1e2) {
        vxAddLogEntry((vx_reference)context, VX_FAILURE, "ERROR: invalid eoff magic in %s\n", binaryFilename);
        return VX_FAILURE;
      }
      fclose(fp__variables);
    }

    // create local tensors used in graph
    vx_size dims_conv0[4] = { 150, 150, 32, 1 };
    vx_tensor conv0 = vxCreateVirtualTensor(graph, 4, dims_conv0, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv0);
    vx_size dims_conv0_relu[4] = { 150, 150, 32, 1 };
    vx_tensor conv0_relu = vxCreateVirtualTensor(graph, 4, dims_conv0_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv0_relu);
    vx_size dims_conv1_dw[4] = { 150, 150, 32, 1 };
    vx_tensor conv1_dw = vxCreateVirtualTensor(graph, 4, dims_conv1_dw, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv1_dw);
    vx_size dims_conv1_dw_relu[4] = { 150, 150, 32, 1 };
    vx_tensor conv1_dw_relu = vxCreateVirtualTensor(graph, 4, dims_conv1_dw_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv1_dw_relu);
    vx_size dims_conv1[4] = { 150, 150, 64, 1 };
    vx_tensor conv1 = vxCreateVirtualTensor(graph, 4, dims_conv1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv1);
    vx_size dims_conv1_relu[4] = { 150, 150, 64, 1 };
    vx_tensor conv1_relu = vxCreateVirtualTensor(graph, 4, dims_conv1_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv1_relu);
    vx_size dims_conv2_dw[4] = { 75, 75, 64, 1 };
    vx_tensor conv2_dw = vxCreateVirtualTensor(graph, 4, dims_conv2_dw, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv2_dw);
    vx_size dims_conv2_dw_relu[4] = { 75, 75, 64, 1 };
    vx_tensor conv2_dw_relu = vxCreateVirtualTensor(graph, 4, dims_conv2_dw_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv2_dw_relu);
    vx_size dims_conv2[4] = { 75, 75, 128, 1 };
    vx_tensor conv2 = vxCreateVirtualTensor(graph, 4, dims_conv2, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv2);
    vx_size dims_conv2_relu[4] = { 75, 75, 128, 1 };
    vx_tensor conv2_relu = vxCreateVirtualTensor(graph, 4, dims_conv2_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv2_relu);
    vx_size dims_conv3_dw[4] = { 75, 75, 128, 1 };
    vx_tensor conv3_dw = vxCreateVirtualTensor(graph, 4, dims_conv3_dw, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv3_dw);
    vx_size dims_conv3_dw_relu[4] = { 75, 75, 128, 1 };
    vx_tensor conv3_dw_relu = vxCreateVirtualTensor(graph, 4, dims_conv3_dw_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv3_dw_relu);
    vx_size dims_conv3[4] = { 75, 75, 128, 1 };
    vx_tensor conv3 = vxCreateVirtualTensor(graph, 4, dims_conv3, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv3);
    vx_size dims_conv3_relu[4] = { 75, 75, 128, 1 };
    vx_tensor conv3_relu = vxCreateVirtualTensor(graph, 4, dims_conv3_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv3_relu);
    vx_size dims_conv4_dw[4] = { 38, 38, 128, 1 };
    vx_tensor conv4_dw = vxCreateVirtualTensor(graph, 4, dims_conv4_dw, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv4_dw);
    vx_size dims_conv4_dw_relu[4] = { 38, 38, 128, 1 };
    vx_tensor conv4_dw_relu = vxCreateVirtualTensor(graph, 4, dims_conv4_dw_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv4_dw_relu);
    vx_size dims_conv4[4] = { 38, 38, 256, 1 };
    vx_tensor conv4 = vxCreateVirtualTensor(graph, 4, dims_conv4, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv4);
    vx_size dims_conv4_relu[4] = { 38, 38, 256, 1 };
    vx_tensor conv4_relu = vxCreateVirtualTensor(graph, 4, dims_conv4_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv4_relu);
    vx_size dims_conv5_dw[4] = { 38, 38, 256, 1 };
    vx_tensor conv5_dw = vxCreateVirtualTensor(graph, 4, dims_conv5_dw, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv5_dw);
    vx_size dims_conv5_dw_relu[4] = { 38, 38, 256, 1 };
    vx_tensor conv5_dw_relu = vxCreateVirtualTensor(graph, 4, dims_conv5_dw_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv5_dw_relu);
    vx_size dims_conv5[4] = { 38, 38, 256, 1 };
    vx_tensor conv5 = vxCreateVirtualTensor(graph, 4, dims_conv5, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv5);
    vx_size dims_conv5_relu[4] = { 38, 38, 256, 1 };
    vx_tensor conv5_relu = vxCreateVirtualTensor(graph, 4, dims_conv5_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv5_relu);
    vx_size dims_conv6_dw[4] = { 19, 19, 256, 1 };
    vx_tensor conv6_dw = vxCreateVirtualTensor(graph, 4, dims_conv6_dw, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv6_dw);
    vx_size dims_conv6_dw_relu[4] = { 19, 19, 256, 1 };
    vx_tensor conv6_dw_relu = vxCreateVirtualTensor(graph, 4, dims_conv6_dw_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv6_dw_relu);
    vx_size dims_conv6[4] = { 19, 19, 512, 1 };
    vx_tensor conv6 = vxCreateVirtualTensor(graph, 4, dims_conv6, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv6);
    vx_size dims_conv6_relu[4] = { 19, 19, 512, 1 };
    vx_tensor conv6_relu = vxCreateVirtualTensor(graph, 4, dims_conv6_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv6_relu);
    vx_size dims_conv7_dw[4] = { 19, 19, 512, 1 };
    vx_tensor conv7_dw = vxCreateVirtualTensor(graph, 4, dims_conv7_dw, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv7_dw);
    vx_size dims_conv7_dw_relu[4] = { 19, 19, 512, 1 };
    vx_tensor conv7_dw_relu = vxCreateVirtualTensor(graph, 4, dims_conv7_dw_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv7_dw_relu);
    vx_size dims_conv7[4] = { 19, 19, 512, 1 };
    vx_tensor conv7 = vxCreateVirtualTensor(graph, 4, dims_conv7, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv7);
    vx_size dims_conv7_relu[4] = { 19, 19, 512, 1 };
    vx_tensor conv7_relu = vxCreateVirtualTensor(graph, 4, dims_conv7_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv7_relu);
    vx_size dims_conv8_dw[4] = { 19, 19, 512, 1 };
    vx_tensor conv8_dw = vxCreateVirtualTensor(graph, 4, dims_conv8_dw, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv8_dw);
    vx_size dims_conv8_dw_relu[4] = { 19, 19, 512, 1 };
    vx_tensor conv8_dw_relu = vxCreateVirtualTensor(graph, 4, dims_conv8_dw_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv8_dw_relu);
    vx_size dims_conv8[4] = { 19, 19, 512, 1 };
    vx_tensor conv8 = vxCreateVirtualTensor(graph, 4, dims_conv8, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv8);
    vx_size dims_conv8_relu[4] = { 19, 19, 512, 1 };
    vx_tensor conv8_relu = vxCreateVirtualTensor(graph, 4, dims_conv8_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv8_relu);
    vx_size dims_conv9_dw[4] = { 19, 19, 512, 1 };
    vx_tensor conv9_dw = vxCreateVirtualTensor(graph, 4, dims_conv9_dw, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv9_dw);
    vx_size dims_conv9_dw_relu[4] = { 19, 19, 512, 1 };
    vx_tensor conv9_dw_relu = vxCreateVirtualTensor(graph, 4, dims_conv9_dw_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv9_dw_relu);
    vx_size dims_conv9[4] = { 19, 19, 512, 1 };
    vx_tensor conv9 = vxCreateVirtualTensor(graph, 4, dims_conv9, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv9);
    vx_size dims_conv9_relu[4] = { 19, 19, 512, 1 };
    vx_tensor conv9_relu = vxCreateVirtualTensor(graph, 4, dims_conv9_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv9_relu);
    vx_size dims_conv10_dw[4] = { 19, 19, 512, 1 };
    vx_tensor conv10_dw = vxCreateVirtualTensor(graph, 4, dims_conv10_dw, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv10_dw);
    vx_size dims_conv10_dw_relu[4] = { 19, 19, 512, 1 };
    vx_tensor conv10_dw_relu = vxCreateVirtualTensor(graph, 4, dims_conv10_dw_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv10_dw_relu);
    vx_size dims_conv10[4] = { 19, 19, 512, 1 };
    vx_tensor conv10 = vxCreateVirtualTensor(graph, 4, dims_conv10, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv10);
    vx_size dims_conv10_relu[4] = { 19, 19, 512, 1 };
    vx_tensor conv10_relu = vxCreateVirtualTensor(graph, 4, dims_conv10_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv10_relu);
    vx_size dims_conv11_dw[4] = { 19, 19, 512, 1 };
    vx_tensor conv11_dw = vxCreateVirtualTensor(graph, 4, dims_conv11_dw, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv11_dw);
    vx_size dims_conv11_dw_relu[4] = { 19, 19, 512, 1 };
    vx_tensor conv11_dw_relu = vxCreateVirtualTensor(graph, 4, dims_conv11_dw_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv11_dw_relu);
    vx_size dims_conv11[4] = { 19, 19, 512, 1 };
    vx_tensor conv11 = vxCreateVirtualTensor(graph, 4, dims_conv11, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv11);
    vx_size dims_conv11_relu[4] = { 19, 19, 512, 1 };
    vx_tensor conv11_relu = vxCreateVirtualTensor(graph, 4, dims_conv11_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv11_relu);
    vx_size dims_conv12_dw[4] = { 10, 10, 512, 1 };
    vx_tensor conv12_dw = vxCreateVirtualTensor(graph, 4, dims_conv12_dw, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv12_dw);
    vx_size dims_conv12_dw_relu[4] = { 10, 10, 512, 1 };
    vx_tensor conv12_dw_relu = vxCreateVirtualTensor(graph, 4, dims_conv12_dw_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv12_dw_relu);
    vx_size dims_conv12[4] = { 10, 10, 1024, 1 };
    vx_tensor conv12 = vxCreateVirtualTensor(graph, 4, dims_conv12, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv12);
    vx_size dims_conv12_relu[4] = { 10, 10, 1024, 1 };
    vx_tensor conv12_relu = vxCreateVirtualTensor(graph, 4, dims_conv12_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv12_relu);
    vx_size dims_conv13_dw[4] = { 10, 10, 1024, 1 };
    vx_tensor conv13_dw = vxCreateVirtualTensor(graph, 4, dims_conv13_dw, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv13_dw);
    vx_size dims_conv13_dw_relu[4] = { 10, 10, 1024, 1 };
    vx_tensor conv13_dw_relu = vxCreateVirtualTensor(graph, 4, dims_conv13_dw_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv13_dw_relu);
    vx_size dims_conv13[4] = { 10, 10, 1024, 1 };
    vx_tensor conv13 = vxCreateVirtualTensor(graph, 4, dims_conv13, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv13);
    vx_size dims_conv13_relu[4] = { 10, 10, 1024, 1 };
    vx_tensor conv13_relu = vxCreateVirtualTensor(graph, 4, dims_conv13_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv13_relu);
    vx_size dims_conv14_1[4] = { 10, 10, 256, 1 };
    vx_tensor conv14_1 = vxCreateVirtualTensor(graph, 4, dims_conv14_1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv14_1);
    vx_size dims_conv14_1_relu[4] = { 10, 10, 256, 1 };
    vx_tensor conv14_1_relu = vxCreateVirtualTensor(graph, 4, dims_conv14_1_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv14_1_relu);
    vx_size dims_conv14_2[4] = { 5, 5, 512, 1 };
    vx_tensor conv14_2 = vxCreateVirtualTensor(graph, 4, dims_conv14_2, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv14_2);
    vx_size dims_conv14_2_relu[4] = { 5, 5, 512, 1 };
    vx_tensor conv14_2_relu = vxCreateVirtualTensor(graph, 4, dims_conv14_2_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv14_2_relu);
    vx_size dims_conv15_1[4] = { 5, 5, 128, 1 };
    vx_tensor conv15_1 = vxCreateVirtualTensor(graph, 4, dims_conv15_1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv15_1);
    vx_size dims_conv15_1_relu[4] = { 5, 5, 128, 1 };
    vx_tensor conv15_1_relu = vxCreateVirtualTensor(graph, 4, dims_conv15_1_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv15_1_relu);
    vx_size dims_conv15_2[4] = { 3, 3, 256, 1 };
    vx_tensor conv15_2 = vxCreateVirtualTensor(graph, 4, dims_conv15_2, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv15_2);
    vx_size dims_conv15_2_relu[4] = { 3, 3, 256, 1 };
    vx_tensor conv15_2_relu = vxCreateVirtualTensor(graph, 4, dims_conv15_2_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv15_2_relu);
    vx_size dims_conv16_1[4] = { 3, 3, 128, 1 };
    vx_tensor conv16_1 = vxCreateVirtualTensor(graph, 4, dims_conv16_1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv16_1);
    vx_size dims_conv16_1_relu[4] = { 3, 3, 128, 1 };
    vx_tensor conv16_1_relu = vxCreateVirtualTensor(graph, 4, dims_conv16_1_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv16_1_relu);
    vx_size dims_conv16_2[4] = { 2, 2, 256, 1 };
    vx_tensor conv16_2 = vxCreateVirtualTensor(graph, 4, dims_conv16_2, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv16_2);
    vx_size dims_conv16_2_relu[4] = { 2, 2, 256, 1 };
    vx_tensor conv16_2_relu = vxCreateVirtualTensor(graph, 4, dims_conv16_2_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv16_2_relu);
    vx_size dims_conv17_1[4] = { 2, 2, 64, 1 };
    vx_tensor conv17_1 = vxCreateVirtualTensor(graph, 4, dims_conv17_1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv17_1);
    vx_size dims_conv17_1_relu[4] = { 2, 2, 64, 1 };
    vx_tensor conv17_1_relu = vxCreateVirtualTensor(graph, 4, dims_conv17_1_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv17_1_relu);
    vx_size dims_conv17_2[4] = { 1, 1, 128, 1 };
    vx_tensor conv17_2 = vxCreateVirtualTensor(graph, 4, dims_conv17_2, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv17_2);
    vx_size dims_conv17_2_relu[4] = { 1, 1, 128, 1 };
    vx_tensor conv17_2_relu = vxCreateVirtualTensor(graph, 4, dims_conv17_2_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv17_2_relu);
    vx_size dims_conv11_mbox_loc[4] = { 19, 19, 12, 1 };
    vx_tensor conv11_mbox_loc = vxCreateVirtualTensor(graph, 4, dims_conv11_mbox_loc, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv11_mbox_loc);
    vx_size dims_conv11_mbox_loc_perm[4] = { 12, 19, 19, 1 };
    vx_tensor conv11_mbox_loc_perm = vxCreateVirtualTensor(graph, 4, dims_conv11_mbox_loc_perm, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv11_mbox_loc_perm);
    vx_size dims_conv11_mbox_loc_flat[4] = { 1, 1, 4332, 1 };
    vx_tensor conv11_mbox_loc_flat = vxCreateVirtualTensor(graph, 4, dims_conv11_mbox_loc_flat, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv11_mbox_loc_flat);
    vx_size dims_conv11_mbox_conf[4] = { 19, 19, 63, 1 };
    vx_tensor conv11_mbox_conf = vxCreateVirtualTensor(graph, 4, dims_conv11_mbox_conf, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv11_mbox_conf);
    vx_size dims_conv11_mbox_conf_perm[4] = { 63, 19, 19, 1 };
    vx_tensor conv11_mbox_conf_perm = vxCreateVirtualTensor(graph, 4, dims_conv11_mbox_conf_perm, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv11_mbox_conf_perm);
    vx_size dims_conv11_mbox_conf_flat[4] = { 1, 1, 22743, 1 };
    vx_tensor conv11_mbox_conf_flat = vxCreateVirtualTensor(graph, 4, dims_conv11_mbox_conf_flat, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv11_mbox_conf_flat);
    vx_size dims_conv11_mbox_priorbox[4] = { 1, 4332, 2, 1 };
    vx_tensor conv11_mbox_priorbox = vxCreateVirtualTensor(graph, 4, dims_conv11_mbox_priorbox, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv11_mbox_priorbox);
    vx_size dims_conv13_mbox_loc[4] = { 10, 10, 24, 1 };
    vx_tensor conv13_mbox_loc = vxCreateVirtualTensor(graph, 4, dims_conv13_mbox_loc, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv13_mbox_loc);
    vx_size dims_conv13_mbox_loc_perm[4] = { 24, 10, 10, 1 };
    vx_tensor conv13_mbox_loc_perm = vxCreateVirtualTensor(graph, 4, dims_conv13_mbox_loc_perm, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv13_mbox_loc_perm);
    vx_size dims_conv13_mbox_loc_flat[4] = { 1, 1, 2400, 1 };
    vx_tensor conv13_mbox_loc_flat = vxCreateVirtualTensor(graph, 4, dims_conv13_mbox_loc_flat, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv13_mbox_loc_flat);
    vx_size dims_conv13_mbox_conf[4] = { 10, 10, 126, 1 };
    vx_tensor conv13_mbox_conf = vxCreateVirtualTensor(graph, 4, dims_conv13_mbox_conf, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv13_mbox_conf);
    vx_size dims_conv13_mbox_conf_perm[4] = { 126, 10, 10, 1 };
    vx_tensor conv13_mbox_conf_perm = vxCreateVirtualTensor(graph, 4, dims_conv13_mbox_conf_perm, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv13_mbox_conf_perm);
    vx_size dims_conv13_mbox_conf_flat[4] = { 1, 1, 12600, 1 };
    vx_tensor conv13_mbox_conf_flat = vxCreateVirtualTensor(graph, 4, dims_conv13_mbox_conf_flat, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv13_mbox_conf_flat);
    vx_size dims_conv13_mbox_priorbox[4] = { 1, 2400, 2, 1 };
    vx_tensor conv13_mbox_priorbox = vxCreateVirtualTensor(graph, 4, dims_conv13_mbox_priorbox, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv13_mbox_priorbox);
    vx_size dims_conv14_2_mbox_loc[4] = { 5, 5, 24, 1 };
    vx_tensor conv14_2_mbox_loc = vxCreateVirtualTensor(graph, 4, dims_conv14_2_mbox_loc, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv14_2_mbox_loc);
    vx_size dims_conv14_2_mbox_loc_perm[4] = { 24, 5, 5, 1 };
    vx_tensor conv14_2_mbox_loc_perm = vxCreateVirtualTensor(graph, 4, dims_conv14_2_mbox_loc_perm, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv14_2_mbox_loc_perm);
    vx_size dims_conv14_2_mbox_loc_flat[4] = { 1, 1, 600, 1 };
    vx_tensor conv14_2_mbox_loc_flat = vxCreateVirtualTensor(graph, 4, dims_conv14_2_mbox_loc_flat, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv14_2_mbox_loc_flat);
    vx_size dims_conv14_2_mbox_conf[4] = { 5, 5, 126, 1 };
    vx_tensor conv14_2_mbox_conf = vxCreateVirtualTensor(graph, 4, dims_conv14_2_mbox_conf, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv14_2_mbox_conf);
    vx_size dims_conv14_2_mbox_conf_perm[4] = { 126, 5, 5, 1 };
    vx_tensor conv14_2_mbox_conf_perm = vxCreateVirtualTensor(graph, 4, dims_conv14_2_mbox_conf_perm, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv14_2_mbox_conf_perm);
    vx_size dims_conv14_2_mbox_conf_flat[4] = { 1, 1, 3150, 1 };
    vx_tensor conv14_2_mbox_conf_flat = vxCreateVirtualTensor(graph, 4, dims_conv14_2_mbox_conf_flat, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv14_2_mbox_conf_flat);
    vx_size dims_conv14_2_mbox_priorbox[4] = { 1, 600, 2, 1 };
    vx_tensor conv14_2_mbox_priorbox = vxCreateVirtualTensor(graph, 4, dims_conv14_2_mbox_priorbox, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv14_2_mbox_priorbox);
    vx_size dims_conv15_2_mbox_loc[4] = { 3, 3, 24, 1 };
    vx_tensor conv15_2_mbox_loc = vxCreateVirtualTensor(graph, 4, dims_conv15_2_mbox_loc, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv15_2_mbox_loc);
    vx_size dims_conv15_2_mbox_loc_perm[4] = { 24, 3, 3, 1 };
    vx_tensor conv15_2_mbox_loc_perm = vxCreateVirtualTensor(graph, 4, dims_conv15_2_mbox_loc_perm, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv15_2_mbox_loc_perm);
    vx_size dims_conv15_2_mbox_loc_flat[4] = { 1, 1, 216, 1 };
    vx_tensor conv15_2_mbox_loc_flat = vxCreateVirtualTensor(graph, 4, dims_conv15_2_mbox_loc_flat, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv15_2_mbox_loc_flat);
    vx_size dims_conv15_2_mbox_conf[4] = { 3, 3, 126, 1 };
    vx_tensor conv15_2_mbox_conf = vxCreateVirtualTensor(graph, 4, dims_conv15_2_mbox_conf, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv15_2_mbox_conf);
    vx_size dims_conv15_2_mbox_conf_perm[4] = { 126, 3, 3, 1 };
    vx_tensor conv15_2_mbox_conf_perm = vxCreateVirtualTensor(graph, 4, dims_conv15_2_mbox_conf_perm, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv15_2_mbox_conf_perm);
    vx_size dims_conv15_2_mbox_conf_flat[4] = { 1, 1, 1134, 1 };
    vx_tensor conv15_2_mbox_conf_flat = vxCreateVirtualTensor(graph, 4, dims_conv15_2_mbox_conf_flat, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv15_2_mbox_conf_flat);
    vx_size dims_conv15_2_mbox_priorbox[4] = { 1, 216, 2, 1 };
    vx_tensor conv15_2_mbox_priorbox = vxCreateVirtualTensor(graph, 4, dims_conv15_2_mbox_priorbox, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv15_2_mbox_priorbox);
    vx_size dims_conv16_2_mbox_loc[4] = { 2, 2, 24, 1 };
    vx_tensor conv16_2_mbox_loc = vxCreateVirtualTensor(graph, 4, dims_conv16_2_mbox_loc, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv16_2_mbox_loc);
    vx_size dims_conv16_2_mbox_loc_perm[4] = { 24, 2, 2, 1 };
    vx_tensor conv16_2_mbox_loc_perm = vxCreateVirtualTensor(graph, 4, dims_conv16_2_mbox_loc_perm, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv16_2_mbox_loc_perm);
    vx_size dims_conv16_2_mbox_loc_flat[4] = { 1, 1, 96, 1 };
    vx_tensor conv16_2_mbox_loc_flat = vxCreateVirtualTensor(graph, 4, dims_conv16_2_mbox_loc_flat, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv16_2_mbox_loc_flat);
    vx_size dims_conv16_2_mbox_conf[4] = { 2, 2, 126, 1 };
    vx_tensor conv16_2_mbox_conf = vxCreateVirtualTensor(graph, 4, dims_conv16_2_mbox_conf, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv16_2_mbox_conf);
    vx_size dims_conv16_2_mbox_conf_perm[4] = { 126, 2, 2, 1 };
    vx_tensor conv16_2_mbox_conf_perm = vxCreateVirtualTensor(graph, 4, dims_conv16_2_mbox_conf_perm, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv16_2_mbox_conf_perm);
    vx_size dims_conv16_2_mbox_conf_flat[4] = { 1, 1, 504, 1 };
    vx_tensor conv16_2_mbox_conf_flat = vxCreateVirtualTensor(graph, 4, dims_conv16_2_mbox_conf_flat, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv16_2_mbox_conf_flat);
    vx_size dims_conv16_2_mbox_priorbox[4] = { 1, 96, 2, 1 };
    vx_tensor conv16_2_mbox_priorbox = vxCreateVirtualTensor(graph, 4, dims_conv16_2_mbox_priorbox, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv16_2_mbox_priorbox);
    vx_size dims_conv17_2_mbox_loc[4] = { 1, 1, 24, 1 };
    vx_tensor conv17_2_mbox_loc = vxCreateVirtualTensor(graph, 4, dims_conv17_2_mbox_loc, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv17_2_mbox_loc);
    vx_size dims_conv17_2_mbox_loc_perm[4] = { 24, 1, 1, 1 };
    vx_tensor conv17_2_mbox_loc_perm = vxCreateVirtualTensor(graph, 4, dims_conv17_2_mbox_loc_perm, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv17_2_mbox_loc_perm);
    vx_size dims_conv17_2_mbox_loc_flat[4] = { 1, 1, 24, 1 };
    vx_tensor conv17_2_mbox_loc_flat = vxCreateVirtualTensor(graph, 4, dims_conv17_2_mbox_loc_flat, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv17_2_mbox_loc_flat);
    vx_size dims_conv17_2_mbox_conf[4] = { 1, 1, 126, 1 };
    vx_tensor conv17_2_mbox_conf = vxCreateVirtualTensor(graph, 4, dims_conv17_2_mbox_conf, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv17_2_mbox_conf);
    vx_size dims_conv17_2_mbox_conf_perm[4] = { 126, 1, 1, 1 };
    vx_tensor conv17_2_mbox_conf_perm = vxCreateVirtualTensor(graph, 4, dims_conv17_2_mbox_conf_perm, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv17_2_mbox_conf_perm);
    vx_size dims_conv17_2_mbox_conf_flat[4] = { 1, 1, 126, 1 };
    vx_tensor conv17_2_mbox_conf_flat = vxCreateVirtualTensor(graph, 4, dims_conv17_2_mbox_conf_flat, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv17_2_mbox_conf_flat);
    vx_size dims_conv17_2_mbox_priorbox[4] = { 1, 24, 2, 1 };
    vx_tensor conv17_2_mbox_priorbox = vxCreateVirtualTensor(graph, 4, dims_conv17_2_mbox_priorbox, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv17_2_mbox_priorbox);
    vx_size dims_mbox_loc[4] = { 1, 1, 7668, 1 };
    vx_tensor mbox_loc = vxCreateVirtualTensor(graph, 4, dims_mbox_loc, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(mbox_loc);
    vx_size dims_mbox_conf[4] = { 1, 1, 40257, 1 };
    vx_tensor mbox_conf = vxCreateVirtualTensor(graph, 4, dims_mbox_conf, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(mbox_conf);
    vx_size dims_mbox_priorbox[4] = { 1, 7668, 2, 1 };
    vx_tensor mbox_priorbox = vxCreateVirtualTensor(graph, 4, dims_mbox_priorbox, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(mbox_priorbox);
    vx_size dims_mbox_conf_reshape[4] = { 1, 21, 1917, 1 };
    vx_tensor mbox_conf_reshape = vxCreateVirtualTensor(graph, 4, dims_mbox_conf_reshape, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(mbox_conf_reshape);
    vx_size dims_mbox_conf_softmax[4] = { 1, 21, 1917, 1 };
    vx_tensor mbox_conf_softmax = vxCreateVirtualTensor(graph, 4, dims_mbox_conf_softmax, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(mbox_conf_softmax);
    vx_size dims_mbox_conf_flatten[4] = { 1, 1, 40257, 1 };
    vx_tensor mbox_conf_flatten = vxCreateVirtualTensor(graph, 4, dims_mbox_conf_flatten, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(mbox_conf_flatten);

    // create nodes in graph

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, data, conv0_w, conv0_b, &conv_params, sizeof(conv_params), conv0);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv0, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv0_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv0_relu, conv1_dw_w, conv1_dw_b, &conv_params, sizeof(conv_params), conv1_dw);
      ERROR_CHECK_OBJECT(node);
      vx_int32 groupCount = 32;
      vx_scalar s_groupCount = vxCreateScalarWithSize(context, VX_TYPE_INT32, &groupCount, sizeof(groupCount));
      ERROR_CHECK_STATUS(vxSetParameterByIndex(node, 6, (vx_reference) s_groupCount));
      ERROR_CHECK_STATUS(vxReleaseScalar(&s_groupCount));
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv1_dw, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv1_dw_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv1_dw_relu, conv1_w, conv1_b, &conv_params, sizeof(conv_params), conv1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv1, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv1_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv1_relu, conv2_dw_w, conv2_dw_b, &conv_params, sizeof(conv_params), conv2_dw);
      ERROR_CHECK_OBJECT(node);
      vx_int32 groupCount = 64;
      vx_scalar s_groupCount = vxCreateScalarWithSize(context, VX_TYPE_INT32, &groupCount, sizeof(groupCount));
      ERROR_CHECK_STATUS(vxSetParameterByIndex(node, 6, (vx_reference) s_groupCount));
      ERROR_CHECK_STATUS(vxReleaseScalar(&s_groupCount));
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv2_dw, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv2_dw_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv2_dw_relu, conv2_w, conv2_b, &conv_params, sizeof(conv_params), conv2);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv2, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv2_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv2_relu, conv3_dw_w, conv3_dw_b, &conv_params, sizeof(conv_params), conv3_dw);
      ERROR_CHECK_OBJECT(node);
      vx_int32 groupCount = 128;
      vx_scalar s_groupCount = vxCreateScalarWithSize(context, VX_TYPE_INT32, &groupCount, sizeof(groupCount));
      ERROR_CHECK_STATUS(vxSetParameterByIndex(node, 6, (vx_reference) s_groupCount));
      ERROR_CHECK_STATUS(vxReleaseScalar(&s_groupCount));
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv3_dw, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv3_dw_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv3_dw_relu, conv3_w, conv3_b, &conv_params, sizeof(conv_params), conv3);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv3, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv3_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv3_relu, conv4_dw_w, conv4_dw_b, &conv_params, sizeof(conv_params), conv4_dw);
      ERROR_CHECK_OBJECT(node);
      vx_int32 groupCount = 128;
      vx_scalar s_groupCount = vxCreateScalarWithSize(context, VX_TYPE_INT32, &groupCount, sizeof(groupCount));
      ERROR_CHECK_STATUS(vxSetParameterByIndex(node, 6, (vx_reference) s_groupCount));
      ERROR_CHECK_STATUS(vxReleaseScalar(&s_groupCount));
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv4_dw, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv4_dw_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv4_dw_relu, conv4_w, conv4_b, &conv_params, sizeof(conv_params), conv4);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv4, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv4_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv4_relu, conv5_dw_w, conv5_dw_b, &conv_params, sizeof(conv_params), conv5_dw);
      ERROR_CHECK_OBJECT(node);
      vx_int32 groupCount = 256;
      vx_scalar s_groupCount = vxCreateScalarWithSize(context, VX_TYPE_INT32, &groupCount, sizeof(groupCount));
      ERROR_CHECK_STATUS(vxSetParameterByIndex(node, 6, (vx_reference) s_groupCount));
      ERROR_CHECK_STATUS(vxReleaseScalar(&s_groupCount));
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv5_dw, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv5_dw_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv5_dw_relu, conv5_w, conv5_b, &conv_params, sizeof(conv_params), conv5);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv5, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv5_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv5_relu, conv6_dw_w, conv6_dw_b, &conv_params, sizeof(conv_params), conv6_dw);
      ERROR_CHECK_OBJECT(node);
      vx_int32 groupCount = 256;
      vx_scalar s_groupCount = vxCreateScalarWithSize(context, VX_TYPE_INT32, &groupCount, sizeof(groupCount));
      ERROR_CHECK_STATUS(vxSetParameterByIndex(node, 6, (vx_reference) s_groupCount));
      ERROR_CHECK_STATUS(vxReleaseScalar(&s_groupCount));
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv6_dw, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv6_dw_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv6_dw_relu, conv6_w, conv6_b, &conv_params, sizeof(conv_params), conv6);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv6, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv6_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv6_relu, conv7_dw_w, conv7_dw_b, &conv_params, sizeof(conv_params), conv7_dw);
      ERROR_CHECK_OBJECT(node);
      vx_int32 groupCount = 512;
      vx_scalar s_groupCount = vxCreateScalarWithSize(context, VX_TYPE_INT32, &groupCount, sizeof(groupCount));
      ERROR_CHECK_STATUS(vxSetParameterByIndex(node, 6, (vx_reference) s_groupCount));
      ERROR_CHECK_STATUS(vxReleaseScalar(&s_groupCount));
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv7_dw, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv7_dw_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv7_dw_relu, conv7_w, conv7_b, &conv_params, sizeof(conv_params), conv7);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv7, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv7_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv7_relu, conv8_dw_w, conv8_dw_b, &conv_params, sizeof(conv_params), conv8_dw);
      ERROR_CHECK_OBJECT(node);
      vx_int32 groupCount = 512;
      vx_scalar s_groupCount = vxCreateScalarWithSize(context, VX_TYPE_INT32, &groupCount, sizeof(groupCount));
      ERROR_CHECK_STATUS(vxSetParameterByIndex(node, 6, (vx_reference) s_groupCount));
      ERROR_CHECK_STATUS(vxReleaseScalar(&s_groupCount));
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv8_dw, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv8_dw_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv8_dw_relu, conv8_w, conv8_b, &conv_params, sizeof(conv_params), conv8);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv8, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv8_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv8_relu, conv9_dw_w, conv9_dw_b, &conv_params, sizeof(conv_params), conv9_dw);
      ERROR_CHECK_OBJECT(node);
      vx_int32 groupCount = 512;
      vx_scalar s_groupCount = vxCreateScalarWithSize(context, VX_TYPE_INT32, &groupCount, sizeof(groupCount));
      ERROR_CHECK_STATUS(vxSetParameterByIndex(node, 6, (vx_reference) s_groupCount));
      ERROR_CHECK_STATUS(vxReleaseScalar(&s_groupCount));
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv9_dw, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv9_dw_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv9_dw_relu, conv9_w, conv9_b, &conv_params, sizeof(conv_params), conv9);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv9, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv9_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv9_relu, conv10_dw_w, conv10_dw_b, &conv_params, sizeof(conv_params), conv10_dw);
      ERROR_CHECK_OBJECT(node);
      vx_int32 groupCount = 512;
      vx_scalar s_groupCount = vxCreateScalarWithSize(context, VX_TYPE_INT32, &groupCount, sizeof(groupCount));
      ERROR_CHECK_STATUS(vxSetParameterByIndex(node, 6, (vx_reference) s_groupCount));
      ERROR_CHECK_STATUS(vxReleaseScalar(&s_groupCount));
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv10_dw, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv10_dw_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv10_dw_relu, conv10_w, conv10_b, &conv_params, sizeof(conv_params), conv10);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv10, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv10_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv10_relu, conv11_dw_w, conv11_dw_b, &conv_params, sizeof(conv_params), conv11_dw);
      ERROR_CHECK_OBJECT(node);
      vx_int32 groupCount = 512;
      vx_scalar s_groupCount = vxCreateScalarWithSize(context, VX_TYPE_INT32, &groupCount, sizeof(groupCount));
      ERROR_CHECK_STATUS(vxSetParameterByIndex(node, 6, (vx_reference) s_groupCount));
      ERROR_CHECK_STATUS(vxReleaseScalar(&s_groupCount));
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv11_dw, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv11_dw_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv11_dw_relu, conv11_w, conv11_b, &conv_params, sizeof(conv_params), conv11);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv11, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv11_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv11_relu, conv12_dw_w, conv12_dw_b, &conv_params, sizeof(conv_params), conv12_dw);
      ERROR_CHECK_OBJECT(node);
      vx_int32 groupCount = 512;
      vx_scalar s_groupCount = vxCreateScalarWithSize(context, VX_TYPE_INT32, &groupCount, sizeof(groupCount));
      ERROR_CHECK_STATUS(vxSetParameterByIndex(node, 6, (vx_reference) s_groupCount));
      ERROR_CHECK_STATUS(vxReleaseScalar(&s_groupCount));
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv12_dw, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv12_dw_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv12_dw_relu, conv12_w, conv12_b, &conv_params, sizeof(conv_params), conv12);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv12, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv12_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv12_relu, conv13_dw_w, conv13_dw_b, &conv_params, sizeof(conv_params), conv13_dw);
      ERROR_CHECK_OBJECT(node);
      vx_int32 groupCount = 1024;
      vx_scalar s_groupCount = vxCreateScalarWithSize(context, VX_TYPE_INT32, &groupCount, sizeof(groupCount));
      ERROR_CHECK_STATUS(vxSetParameterByIndex(node, 6, (vx_reference) s_groupCount));
      ERROR_CHECK_STATUS(vxReleaseScalar(&s_groupCount));
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv13_dw, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv13_dw_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv13_dw_relu, conv13_w, conv13_b, &conv_params, sizeof(conv_params), conv13);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv13, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv13_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv13_relu, conv14_1_w, conv14_1_b, &conv_params, sizeof(conv_params), conv14_1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv14_1, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv14_1_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv14_1_relu, conv14_2_w, conv14_2_b, &conv_params, sizeof(conv_params), conv14_2);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv14_2, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv14_2_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv14_2_relu, conv15_1_w, conv15_1_b, &conv_params, sizeof(conv_params), conv15_1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv15_1, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv15_1_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv15_1_relu, conv15_2_w, conv15_2_b, &conv_params, sizeof(conv_params), conv15_2);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv15_2, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv15_2_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv15_2_relu, conv16_1_w, conv16_1_b, &conv_params, sizeof(conv_params), conv16_1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv16_1, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv16_1_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv16_1_relu, conv16_2_w, conv16_2_b, &conv_params, sizeof(conv_params), conv16_2);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv16_2, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv16_2_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv16_2_relu, conv17_1_w, conv17_1_b, &conv_params, sizeof(conv_params), conv17_1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv17_1, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv17_1_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv17_1_relu, conv17_2_w, conv17_2_b, &conv_params, sizeof(conv_params), conv17_2);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, conv17_2, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv17_2_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv11_relu, conv11_mbox_loc_w, conv11_mbox_loc_b, &conv_params, sizeof(conv_params), conv11_mbox_loc);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxPermuteLayer(graph, conv11_mbox_loc, 1, conv11_mbox_loc_perm);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxReshapeLayer(graph, conv11_mbox_loc_perm, conv11_mbox_loc_flat);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv11_relu, conv11_mbox_conf_w, conv11_mbox_conf_b, &conv_params, sizeof(conv_params), conv11_mbox_conf);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxPermuteLayer(graph, conv11_mbox_conf, 1, conv11_mbox_conf_perm);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxReshapeLayer(graph, conv11_mbox_conf_perm, conv11_mbox_conf_flat);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { 
      vx_float32 min_size = 60.000000;
      vx_float32 max_size = 0.000000;
      vx_int32 flip = 1;
      vx_int32 clip = 0;
      vx_float32 offset = 0.500000;
      
      vx_scalar s_min_size = vxCreateScalarWithSize(context, VX_TYPE_FLOAT32, &min_size, sizeof(min_size));
      vx_scalar s_max_size = vxCreateScalarWithSize(context, VX_TYPE_FLOAT32, &max_size, sizeof(max_size));    
      vx_scalar s_flip = vxCreateScalarWithSize(context, VX_TYPE_INT32, &flip, sizeof(flip));
      vx_scalar s_clip = vxCreateScalarWithSize(context, VX_TYPE_INT32, &clip, sizeof(clip));
      vx_scalar s_offset = vxCreateScalarWithSize(context, VX_TYPE_FLOAT32, &offset, sizeof(offset));
      vx_node node = vxPriorBoxLayer(graph, conv11_relu, data, s_min_size, 2.0 , s_flip, s_clip, s_offset, conv11_mbox_priorbox , s_max_size, 0.10000000149,0.10000000149,0.20000000298,0.20000000298 );
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv13_relu, conv13_mbox_loc_w, conv13_mbox_loc_b, &conv_params, sizeof(conv_params), conv13_mbox_loc);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxPermuteLayer(graph, conv13_mbox_loc, 1, conv13_mbox_loc_perm);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxReshapeLayer(graph, conv13_mbox_loc_perm, conv13_mbox_loc_flat);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv13_relu, conv13_mbox_conf_w, conv13_mbox_conf_b, &conv_params, sizeof(conv_params), conv13_mbox_conf);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxPermuteLayer(graph, conv13_mbox_conf, 1, conv13_mbox_conf_perm);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxReshapeLayer(graph, conv13_mbox_conf_perm, conv13_mbox_conf_flat);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { 
      vx_float32 min_size = 105.000000;
      vx_float32 max_size = 150.000000;
      vx_int32 flip = 1;
      vx_int32 clip = 0;
      vx_float32 offset = 0.500000;
      
      vx_scalar s_min_size = vxCreateScalarWithSize(context, VX_TYPE_FLOAT32, &min_size, sizeof(min_size));
      vx_scalar s_max_size = vxCreateScalarWithSize(context, VX_TYPE_FLOAT32, &max_size, sizeof(max_size));    
      vx_scalar s_flip = vxCreateScalarWithSize(context, VX_TYPE_INT32, &flip, sizeof(flip));
      vx_scalar s_clip = vxCreateScalarWithSize(context, VX_TYPE_INT32, &clip, sizeof(clip));
      vx_scalar s_offset = vxCreateScalarWithSize(context, VX_TYPE_FLOAT32, &offset, sizeof(offset));
      vx_node node = vxPriorBoxLayer(graph, conv13_relu, data, s_min_size, 2.0,3.0 , s_flip, s_clip, s_offset, conv13_mbox_priorbox , s_max_size, 0.10000000149,0.10000000149,0.20000000298,0.20000000298 );
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv14_2_relu, conv14_2_mbox_loc_w, conv14_2_mbox_loc_b, &conv_params, sizeof(conv_params), conv14_2_mbox_loc);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxPermuteLayer(graph, conv14_2_mbox_loc, 1, conv14_2_mbox_loc_perm);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxReshapeLayer(graph, conv14_2_mbox_loc_perm, conv14_2_mbox_loc_flat);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv14_2_relu, conv14_2_mbox_conf_w, conv14_2_mbox_conf_b, &conv_params, sizeof(conv_params), conv14_2_mbox_conf);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxPermuteLayer(graph, conv14_2_mbox_conf, 1, conv14_2_mbox_conf_perm);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxReshapeLayer(graph, conv14_2_mbox_conf_perm, conv14_2_mbox_conf_flat);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { 
      vx_float32 min_size = 150.000000;
      vx_float32 max_size = 195.000000;
      vx_int32 flip = 1;
      vx_int32 clip = 0;
      vx_float32 offset = 0.500000;
      
      vx_scalar s_min_size = vxCreateScalarWithSize(context, VX_TYPE_FLOAT32, &min_size, sizeof(min_size));
      vx_scalar s_max_size = vxCreateScalarWithSize(context, VX_TYPE_FLOAT32, &max_size, sizeof(max_size));    
      vx_scalar s_flip = vxCreateScalarWithSize(context, VX_TYPE_INT32, &flip, sizeof(flip));
      vx_scalar s_clip = vxCreateScalarWithSize(context, VX_TYPE_INT32, &clip, sizeof(clip));
      vx_scalar s_offset = vxCreateScalarWithSize(context, VX_TYPE_FLOAT32, &offset, sizeof(offset));
      vx_node node = vxPriorBoxLayer(graph, conv14_2_relu, data, s_min_size, 2.0,3.0 , s_flip, s_clip, s_offset, conv14_2_mbox_priorbox , s_max_size, 0.10000000149,0.10000000149,0.20000000298,0.20000000298 );
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv15_2_relu, conv15_2_mbox_loc_w, conv15_2_mbox_loc_b, &conv_params, sizeof(conv_params), conv15_2_mbox_loc);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxPermuteLayer(graph, conv15_2_mbox_loc, 1, conv15_2_mbox_loc_perm);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxReshapeLayer(graph, conv15_2_mbox_loc_perm, conv15_2_mbox_loc_flat);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv15_2_relu, conv15_2_mbox_conf_w, conv15_2_mbox_conf_b, &conv_params, sizeof(conv_params), conv15_2_mbox_conf);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxPermuteLayer(graph, conv15_2_mbox_conf, 1, conv15_2_mbox_conf_perm);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxReshapeLayer(graph, conv15_2_mbox_conf_perm, conv15_2_mbox_conf_flat);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { 
      vx_float32 min_size = 195.000000;
      vx_float32 max_size = 240.000000;
      vx_int32 flip = 1;
      vx_int32 clip = 0;
      vx_float32 offset = 0.500000;
      
      vx_scalar s_min_size = vxCreateScalarWithSize(context, VX_TYPE_FLOAT32, &min_size, sizeof(min_size));
      vx_scalar s_max_size = vxCreateScalarWithSize(context, VX_TYPE_FLOAT32, &max_size, sizeof(max_size));    
      vx_scalar s_flip = vxCreateScalarWithSize(context, VX_TYPE_INT32, &flip, sizeof(flip));
      vx_scalar s_clip = vxCreateScalarWithSize(context, VX_TYPE_INT32, &clip, sizeof(clip));
      vx_scalar s_offset = vxCreateScalarWithSize(context, VX_TYPE_FLOAT32, &offset, sizeof(offset));
      vx_node node = vxPriorBoxLayer(graph, conv15_2_relu, data, s_min_size, 2.0,3.0 , s_flip, s_clip, s_offset, conv15_2_mbox_priorbox , s_max_size, 0.10000000149,0.10000000149,0.20000000298,0.20000000298 );
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv16_2_relu, conv16_2_mbox_loc_w, conv16_2_mbox_loc_b, &conv_params, sizeof(conv_params), conv16_2_mbox_loc);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxPermuteLayer(graph, conv16_2_mbox_loc, 1, conv16_2_mbox_loc_perm);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxReshapeLayer(graph, conv16_2_mbox_loc_perm, conv16_2_mbox_loc_flat);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv16_2_relu, conv16_2_mbox_conf_w, conv16_2_mbox_conf_b, &conv_params, sizeof(conv_params), conv16_2_mbox_conf);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxPermuteLayer(graph, conv16_2_mbox_conf, 1, conv16_2_mbox_conf_perm);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxReshapeLayer(graph, conv16_2_mbox_conf_perm, conv16_2_mbox_conf_flat);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { 
      vx_float32 min_size = 240.000000;
      vx_float32 max_size = 285.000000;
      vx_int32 flip = 1;
      vx_int32 clip = 0;
      vx_float32 offset = 0.500000;
      
      vx_scalar s_min_size = vxCreateScalarWithSize(context, VX_TYPE_FLOAT32, &min_size, sizeof(min_size));
      vx_scalar s_max_size = vxCreateScalarWithSize(context, VX_TYPE_FLOAT32, &max_size, sizeof(max_size));    
      vx_scalar s_flip = vxCreateScalarWithSize(context, VX_TYPE_INT32, &flip, sizeof(flip));
      vx_scalar s_clip = vxCreateScalarWithSize(context, VX_TYPE_INT32, &clip, sizeof(clip));
      vx_scalar s_offset = vxCreateScalarWithSize(context, VX_TYPE_FLOAT32, &offset, sizeof(offset));
      vx_node node = vxPriorBoxLayer(graph, conv16_2_relu, data, s_min_size, 2.0,3.0 , s_flip, s_clip, s_offset, conv16_2_mbox_priorbox , s_max_size, 0.10000000149,0.10000000149,0.20000000298,0.20000000298 );
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv17_2_relu, conv17_2_mbox_loc_w, conv17_2_mbox_loc_b, &conv_params, sizeof(conv_params), conv17_2_mbox_loc);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxPermuteLayer(graph, conv17_2_mbox_loc, 1, conv17_2_mbox_loc_perm);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxReshapeLayer(graph, conv17_2_mbox_loc_perm, conv17_2_mbox_loc_flat);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, conv17_2_relu, conv17_2_mbox_conf_w, conv17_2_mbox_conf_b, &conv_params, sizeof(conv_params), conv17_2_mbox_conf);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxPermuteLayer(graph, conv17_2_mbox_conf, 1, conv17_2_mbox_conf_perm);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxReshapeLayer(graph, conv17_2_mbox_conf_perm, conv17_2_mbox_conf_flat);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { 
      vx_float32 min_size = 285.000000;
      vx_float32 max_size = 300.000000;
      vx_int32 flip = 1;
      vx_int32 clip = 0;
      vx_float32 offset = 0.500000;
      
      vx_scalar s_min_size = vxCreateScalarWithSize(context, VX_TYPE_FLOAT32, &min_size, sizeof(min_size));
      vx_scalar s_max_size = vxCreateScalarWithSize(context, VX_TYPE_FLOAT32, &max_size, sizeof(max_size));    
      vx_scalar s_flip = vxCreateScalarWithSize(context, VX_TYPE_INT32, &flip, sizeof(flip));
      vx_scalar s_clip = vxCreateScalarWithSize(context, VX_TYPE_INT32, &clip, sizeof(clip));
      vx_scalar s_offset = vxCreateScalarWithSize(context, VX_TYPE_FLOAT32, &offset, sizeof(offset));
      vx_node node = vxPriorBoxLayer(graph, conv17_2_relu, data, s_min_size, 2.0,3.0 , s_flip, s_clip, s_offset, conv17_2_mbox_priorbox , s_max_size, 0.10000000149,0.10000000149,0.20000000298,0.20000000298 );
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxConcatLayer(graph, mbox_loc, conv11_mbox_loc_flat, conv13_mbox_loc_flat, conv14_2_mbox_loc_flat, conv15_2_mbox_loc_flat, conv16_2_mbox_loc_flat, conv17_2_mbox_loc_flat, NULL, NULL);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxConcatLayer(graph, mbox_conf, conv11_mbox_conf_flat, conv13_mbox_conf_flat, conv14_2_mbox_conf_flat, conv15_2_mbox_conf_flat, conv16_2_mbox_conf_flat, conv17_2_mbox_conf_flat, NULL, NULL);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxConcatLayer(graph, mbox_priorbox, conv11_mbox_priorbox, conv13_mbox_priorbox, conv14_2_mbox_priorbox, conv15_2_mbox_priorbox, conv16_2_mbox_priorbox, conv17_2_mbox_priorbox, NULL, NULL);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxReshapeLayer(graph, mbox_conf, mbox_conf_reshape);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxSoftmaxLayer(graph, mbox_conf_reshape, mbox_conf_softmax);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxReshapeLayer(graph, mbox_conf_softmax, mbox_conf_flatten);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxDetectionOutputLayer(graph, mbox_loc, mbox_conf_flatten, mbox_priorbox, 21, 1, 0, 0.450000, 2, 100, 0, detection_out);
      ERROR_CHECK_OBJECT(node);     
        
      vx_int32 top_k = 100;
      vx_scalar s_topK = vxCreateScalarWithSize(context, VX_TYPE_INT32, &top_k, sizeof(top_k));
      ERROR_CHECK_STATUS(vxSetParameterByIndex(node, 12, (vx_reference) s_topK));
      ERROR_CHECK_STATUS(vxReleaseScalar(&s_topK));
      vx_float32 confidence_threshold = 0.250000;
      vx_scalar s_confidence_threshold = vxCreateScalarWithSize(context, VX_TYPE_FLOAT32, &confidence_threshold, sizeof(confidence_threshold));
      ERROR_CHECK_STATUS(vxSetParameterByIndex(node, 13, (vx_reference) s_confidence_threshold));
      ERROR_CHECK_STATUS(vxReleaseScalar(&s_confidence_threshold));
     ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    // release local tensors
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv0));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv0_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv1_dw));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv1_dw_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv1_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv2_dw));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv2_dw_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv2));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv2_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv3_dw));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv3_dw_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv3));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv3_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv4_dw));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv4_dw_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv4));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv4_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv5_dw));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv5_dw_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv5));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv5_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv6_dw));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv6_dw_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv6));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv6_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv7_dw));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv7_dw_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv7));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv7_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv8_dw));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv8_dw_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv8));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv8_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv9_dw));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv9_dw_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv9));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv9_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv10_dw));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv10_dw_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv10));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv10_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv11_dw));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv11_dw_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv11));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv11_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv12_dw));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv12_dw_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv12));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv12_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv13_dw));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv13_dw_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv13));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv13_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv14_1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv14_1_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv14_2));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv14_2_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv15_1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv15_1_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv15_2));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv15_2_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv16_1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv16_1_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv16_2));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv16_2_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv17_1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv17_1_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv17_2));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv17_2_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv11_mbox_loc));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv11_mbox_loc_perm));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv11_mbox_loc_flat));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv11_mbox_conf));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv11_mbox_conf_perm));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv11_mbox_conf_flat));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv11_mbox_priorbox));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv13_mbox_loc));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv13_mbox_loc_perm));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv13_mbox_loc_flat));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv13_mbox_conf));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv13_mbox_conf_perm));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv13_mbox_conf_flat));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv13_mbox_priorbox));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv14_2_mbox_loc));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv14_2_mbox_loc_perm));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv14_2_mbox_loc_flat));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv14_2_mbox_conf));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv14_2_mbox_conf_perm));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv14_2_mbox_conf_flat));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv14_2_mbox_priorbox));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv15_2_mbox_loc));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv15_2_mbox_loc_perm));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv15_2_mbox_loc_flat));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv15_2_mbox_conf));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv15_2_mbox_conf_perm));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv15_2_mbox_conf_flat));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv15_2_mbox_priorbox));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv16_2_mbox_loc));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv16_2_mbox_loc_perm));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv16_2_mbox_loc_flat));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv16_2_mbox_conf));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv16_2_mbox_conf_perm));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv16_2_mbox_conf_flat));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv16_2_mbox_priorbox));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv17_2_mbox_loc));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv17_2_mbox_loc_perm));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv17_2_mbox_loc_flat));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv17_2_mbox_conf));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv17_2_mbox_conf_perm));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv17_2_mbox_conf_flat));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv17_2_mbox_priorbox));
    ERROR_CHECK_STATUS(vxReleaseTensor(&mbox_loc));
    ERROR_CHECK_STATUS(vxReleaseTensor(&mbox_conf));
    ERROR_CHECK_STATUS(vxReleaseTensor(&mbox_priorbox));
    ERROR_CHECK_STATUS(vxReleaseTensor(&mbox_conf_reshape));
    ERROR_CHECK_STATUS(vxReleaseTensor(&mbox_conf_softmax));
    ERROR_CHECK_STATUS(vxReleaseTensor(&mbox_conf_flatten));

    // release initializer tensors
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv0_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv0_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv1_dw_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv1_dw_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv1_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv1_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv2_dw_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv2_dw_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv2_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv2_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv3_dw_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv3_dw_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv3_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv3_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv4_dw_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv4_dw_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv4_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv4_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv5_dw_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv5_dw_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv5_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv5_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv6_dw_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv6_dw_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv6_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv6_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv7_dw_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv7_dw_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv7_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv7_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv8_dw_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv8_dw_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv8_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv8_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv9_dw_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv9_dw_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv9_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv9_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv10_dw_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv10_dw_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv10_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv10_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv11_dw_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv11_dw_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv11_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv11_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv12_dw_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv12_dw_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv12_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv12_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv13_dw_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv13_dw_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv13_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv13_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv14_1_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv14_1_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv14_2_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv14_2_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv15_1_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv15_1_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv15_2_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv15_2_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv16_1_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv16_1_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv16_2_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv16_2_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv17_1_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv17_1_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv17_2_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv17_2_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv11_mbox_loc_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv11_mbox_loc_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv11_mbox_conf_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv11_mbox_conf_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv13_mbox_loc_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv13_mbox_loc_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv13_mbox_conf_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv13_mbox_conf_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv14_2_mbox_loc_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv14_2_mbox_loc_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv14_2_mbox_conf_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv14_2_mbox_conf_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv15_2_mbox_loc_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv15_2_mbox_loc_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv15_2_mbox_conf_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv15_2_mbox_conf_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv16_2_mbox_loc_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv16_2_mbox_loc_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv16_2_mbox_conf_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv16_2_mbox_conf_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv17_2_mbox_loc_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv17_2_mbox_loc_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv17_2_mbox_conf_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv17_2_mbox_conf_b));

    return VX_SUCCESS;
}

/*
Copyright (c) 2019 - 2020 Advanced Micro Devices, Inc. All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

#ifndef MIVISIONX_RALI_API_INFO_H
#define MIVISIONX_RALI_API_INFO_H
#include "rali_api_types.h"
///
/// \param image
/// \return The width of the RALI's output image in pixels
extern "C" int RALI_API_CALL raliGetOutputWidth(RaliContext rali_context);

///
/// \param image
/// \return The height of the RALI's output image in pixels. It includes all images in the batch.
extern "C" int RALI_API_CALL raliGetOutputHeight(RaliContext rali_context);

///
/// \param rali_context
/// \return The color format of the RALI's output. It's equivalent of what's passed to the loaders as input color format.
extern "C" int RALI_API_CALL raliGetOutputColorFormat(RaliContext rali_context);

///
/// \param rali_context
/// \return The number of images yet to be processed
extern "C"  size_t  RALI_API_CALL raliGetRemainingImages(RaliContext rali_context);

/// Returned value valid only after raliVerify is called
/// \param image
/// \return Width of the graph output image
extern "C" size_t RALI_API_CALL raliGetImageWidth(RaliImage image);

/// Returned value valid only after raliVerify is called
/// \param image
/// \return Height of the pipeline output image, includes all images in the batch
extern "C" size_t RALI_API_CALL raliGetImageHeight(RaliImage image);


/// Returned value valid only after raliVerify is called
/// \param image
/// \return Color format of the pipeline output image,
extern "C" size_t RALI_API_CALL raliGetImagePlanes(RaliImage image);

/// Returned value valid only after raliVerify is called
/// \param rali_context
/// \return 1 if all images have been processed, otherwise 0
extern "C" size_t RALI_API_CALL raliIsEmpty(RaliContext rali_context);


///
/// \param rali_context
/// \return Number of augmentation graph branches. Defined by number of calls to the augmentation API's with the is_output flag set to true.
extern "C" size_t RALI_API_CALL raliGetAugmentationBranchCount(RaliContext rali_context);

///
/// \param rali_context
/// \return The status of tha last API call
extern "C" RaliStatus RALI_API_CALL raliGetStatus(RaliContext rali_context);

///
/// \param rali_context
/// \return The last error message generated by call to rali API
extern "C" const char* RALI_API_CALL raliGetErrorMessage(RaliContext rali_context);

///
/// \param rali_context
/// \return The timing info associated with recent execution.
extern "C" TimingInfo RALI_API_CALL raliGetTimingInfo(RaliContext rali_context);

#endif //MIVISIONX_RALI_API_INFO_H

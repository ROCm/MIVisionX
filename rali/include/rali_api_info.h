#ifndef MIVISIONX_RALI_API_INFO_H
#define MIVISIONX_RALI_API_INFO_H
#include "rali_api_types.h"
///
/// \param image
/// \return The width of the RALI's output image in pixels
extern "C" int RALI_API_CALL raliGetOutputWidth(RaliContext rali_context);

///
/// \param image
/// \return The height of the RALI's output image in pixels. It includes all images in the batch.
extern "C" int RALI_API_CALL raliGetOutputHeight(RaliContext rali_context);

///
/// \param rali_context
/// \return The color format of the RALI's output. It's equivalent of what's passed to the loaders as input color format.
extern "C" int RALI_API_CALL raliGetOutputColorFormat(RaliContext rali_context);

///
/// \param rali_context
/// \return The number of images yet to be processed
extern "C"  size_t  RALI_API_CALL raliGetRemainingImages(RaliContext rali_context);

/// Returned value valid only after raliVerify is called
/// \param image
/// \return Width of the graph output image
extern "C" size_t RALI_API_CALL raliGetImageWidth(RaliImage image);

/// Returned value valid only after raliVerify is called
/// \param image
/// \return Height of the pipeline output image, includes all images in the batch
extern "C" size_t RALI_API_CALL raliGetImageHeight(RaliImage image);


/// Returned value valid only after raliVerify is called
/// \param image
/// \return Color format of the pipeline output image,
extern "C" size_t RALI_API_CALL raliGetImagePlanes(RaliImage image);

/// Returned value valid only after raliVerify is called
/// \param rali_context
/// \return 1 if all images have been processed, otherwise 0
extern "C" size_t RALI_API_CALL raliIsEmpty(RaliContext rali_context);


///
/// \param rali_context
/// \return Number of augmentation graph branches. Defined by number of calls to the augmentation API's with the is_output flag set to true.
extern "C" size_t RALI_API_CALL raliGetAugmentationBranchCount(RaliContext rali_context);

///
/// \param rali_context
/// \return The status of tha last API call
extern "C" RaliStatus RALI_API_CALL raliGetStatus(RaliContext rali_context);

///
/// \param rali_context
/// \return The last error message generated by call to rali API
extern "C" const char* RALI_API_CALL raliGetErrorMessage(RaliContext rali_context);

///
/// \param rali_context
/// \return The timing info associated with recent execution.
extern "C" TimingInfo RALI_API_CALL raliGetTimingInfo(RaliContext rali_context);

///
/// \param rali_context
/// \param source_path path to the folder that contains the dataset or metadata file
/// \return RaliMetaData object, can be used to inquire about the rali's output (processed) tensors
extern "C" RaliMetaData RALI_API_CALL raliCreateLabelReader(RaliContext rali_context, const char* source_path);

///
/// \param rali_context
/// \param buf user buffer provided to be filled with output image name
/// \param image_idx the imageIdx in the output batch
extern "C" void RALI_API_CALL raliGetImageName(RaliContext rali_context,  char* buf, unsigned image_idx);

///
/// \param rali_context
/// \param image_idx the imageIdx in the output batch
/// \return The length of the name of the image associated with image_idx in the output batch
extern "C" unsigned RALI_API_CALL raliGetImageNameLen(RaliContext rali_context,  unsigned image_idx);

/// \param meta_data RaliMetaData object that contains info about the images and labels
/// \param buf user's buffer that will be filled with labels. Its needs to be at least of size batch_size.
extern "C" void RALI_API_CALL raliGetImageLabels(RaliContext rali_context, int* buf);

///
/// \param rali_context
/// \param image_idx the imageIdx in the output batch
/// \return The size of the buffer needs to be provided by user to get bounding box info associated with image_idx in the output batch.
extern "C" unsigned RALI_API_CALL raliGetBoundingBoxCount(RaliContext rali_context, unsigned image_idx );

///
/// \param rali_context
/// \param image_idx the imageIdx in the output batch
/// \param buf The user's buffer that will be filled with bounding box info. It needs to be of size bounding box len returned by a call to the raliGetBoundingBoxCount
extern "C" void RALI_API_CALL raliGetBoundingBoxLabel(RaliContext rali_context, int* buf, unsigned image_idx );
extern "C" void RALI_API_CALL raliGetBoundingBoxCords(RaliContext rali_context, int* buf, unsigned image_idx );



#endif //MIVISIONX_RALI_API_INFO_H
